При написании использовался netty 4.0.23 и библиотека для постройки HTML - Gagawa Version 1.0.1
	
	
	Обработка запросов
	
	В методе run() класса HttpServer происходит  инициализация и запуск сервера. В классе-инициализаторе 
HttpServerInitializer добавляются хендлеры в пайплайн для принятия и дальнейшей обработки запросов. В методе 
channelRead() класса HttpServerHandler, который расширяет ChannelInboundHandlerAdapter, обрабатывается 
входящий запрос, создается объект класса RequestInfo, который содержит информацию о запросе. Полученый URI 
запроса сверяется со всеми константами класса URIContainer, при совпадении создается объект типа ResponseWriter, 
класс которого зависит от обрабатываемого URI (Например, для /status запроса используется StatusResponseWriter).
	Каждый ResponseWriter обрабатывает соответствующий запрос реализуя метод writeResponse(). Так же каждый 
ResponseWriter при создании получает ссылку на объект статистики сервера ServerStats и объект RequestInfo. 
Перед записью ответа ResponseWriter обновляет статистику данными, полученными из запроса.

1. "/" RootResponseWriter
	Запрос корня сервера, в ответ записвается приветствие.
	
2. "hello" HelloResponseWriter
	10-секундная задержка реализована с помощью объектра NioEventLoop полученного из DefaultChannelHandlerContext. 
	Вызывается метод schedule где указывается нужная нам задержка и передается HelloResponseWriter как параметр. 
	При этом объект HelloResponseWriter долженреализовывать интерфейс Runnable. Метод writeResponse() вызывается 
	в методе run().
	
3. "redirect?url=<url>" RedirectResponseWriter
	Для обработки этого запроса сперва находится значение URL из URI в методе getUrlFromUri(String requestUri). 
	С помощью объектра QueryStringDecoder находится URL, а методе writeResponse() класса RedirectResponseWriter 
	создается ответ с заголовком LOCATION и значением URL, полученного на предыдущем шаге.
	
4. "/status" StatusResponseWriter 
	Перед записью ответа writeResponse() вызывается статический метод HTMLBuilder.buildHTML(ServerStats stats) 
	параметром которого является ссылка на объект статистики stats. Созданный html отсылается вместе с ответом 
	клиенту, заголовке ответа указывается значение text/html.
	
	
	Подсчет статистики
	
	ServerStats содержит статистику о сервере: счетчик подключений, таблицу переадресации по URL(URLTable), таблицу 
IP адресов(IPTable) и таблицу-лог о 16 последних обработаных соединениях(ConnectionsLog). Для каждой таблицы создано 
класс, описывающий запись таблицы(одну строку): URLTableRecord, IPTableRecord и LogRecord соответственно. Все записи 
в каждой таблице хранятся в списке ArrayList.
	Количество запросов подсчитывается путем инкрементирования значения поля totalConnectionsNumber объекта класса 
ServerStats. В таблице URLTable каждая запись соответсвует определенному URL. При получении redirect запроса от 
клиента проверяется, есть ли в таблице полученный URL. Если да - инкрементируем соответствующее значение поля в 
записи, если же нет – создаем новую запись для нового URL и значение счетчика устанавливается в 1. По такому же 
принципу подсчитывается статистика для IP таблицы. IP клиента находится из 
ChannelHandlerContext.channel().remoteAddress(), время запроса с помощью класса Date. Так же в каждой записи IP 
таблицы хрянится список "посещенных" URI для данного IP адреса для подсчета уникальных запросов. 
	Для лога значение timestamp получено с помощью класса Timestamp, в конструктор которого передается объект Date(). 
URI, src_ip и bytes_received получаем из объекта RequestInfo. Значение bytes_received находится путем преобразования 
запроса из строки в массив байтов, размер массива и есть искомое значение. Так же определяется значение bytes_sent. 
Значение скорости speed находим путем фиксации времени до и после записи ответа, и деления разниці времени на размер 
ответа.
	
	
	Отображение статистики
	
	Классы таблиц реализуют интерфейс TableIf, в котором объявлены методы для получения имени таблицы, заголовков таблицы 
и ее данных: String getLabel(), String[] getHeaders(), String[][] getData(). Поскольку HTMLBuilder для добавления таблицы 
в html документ принимает объект типа TableIf, можно легко создавать и добавлять новые таблицы с другой статистикой просто 
переопределив методы интерфейса TableIf. Класс HTMLBuilder строит примитивный html документ для отображения статистики, 
используя библиотеку Gagawa.
